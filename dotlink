#!/usr/bin/env bash

# Copyright (c) 2020 JoÃ«l Porquet-Lupine. All rights reserved.
#
# This work is licensed under the GPLv2+. Please see LICENSE for more
# information.

# Drop script at root of dotfile directory.
# dotlink [options] install [targets]...
# dotlink [options] uninstall [targets]...
# dotlink [options] status [targets]...

# Script execution
#   -e: exit immediately if a command fails
#   -E: Safer -e option for traps
#   -u: fail if a variable is used unset
#   -o pipefail: exit immediately if command in a pipe fails
set -eEuo pipefail
#   -x: print each command before executing (great for debugging)
#set -x

# Global variables
## Convenient values
readonly SCRIPTPATH=$(readlink -f "${0}")
readonly SCRIPTNAME=$(basename "$SCRIPTPATH")

## Global variable
PRETEND=0
VERBOSE=0

## Constants
readonly SPACE='[[:space:]]*'

# Logging helpers
log() {
    printf %s\\n "${*}"
}
info() {
    if [[ ${VERBOSE} -eq 1 ]]; then
        log "Info: ${*}"
    fi
}
warning() {
    log "Warning: ${*}" >&2
}
error() {
    log "Error: ${*}" >&2
}

# Individual commands
## Install file
install_one() {
    local -r src="$1" dest="$2" dir="$3"

    # Real paths
    local -r src_rp="${PWD}/${src}"         # From where we are
    local -r dst_rp="${dest/#\~/$HOME}"     # Expand tilde

    if [[ -e "${dst_rp}" ]]; then
        warning "skipping target '${src}':" \
            "destination '${dest}' already installed"
        return
    fi

    info "install ${src} to ${dest} as ${dir}"
    [[ ${PRETEND} -eq 1 ]] && return

    case "${dir}" in
        slink)  ln -s "${src_rp}" "${dst_rp}" ;;
        copy)   cp "${src_rp}" "${dst_rp}" ;;
        hlink)  ln "${src_rp}" "${dst_rp}" ;;
    esac
}

## Uninstall file
uninstall_one() {
    local -r src="$1" dest="$2" dir="$3"

    # Real paths
    local -r src_rp="${PWD}/${src}"         # From where we are
    local -r dst_rp="${dest/#\~/$HOME}"     # Expand tilde

    if [[ ! -e "${dst_rp}" ]]; then
        warning "skipping target '${src}':" \
            "destination '${dest}' not installed"
        return
    fi

    info "remove ${dest}"
    [[ ${PRETEND} -eq 1 ]] && return

    local rm_opt="-f"
    [[ -d "${dst_rp}" ]] && rm_opt+="r"

    rm "${rm_opt}" "${dst_rp}"
}

## Get status
status_one() {
    local -r src="$1" dest="$2" dir="$3"

    # Real paths
    local -r src_rp="${PWD}/${src}"         # From where we are
    local -r dst_rp="${dest/#\~/$HOME}"     # Expand tilde

    if [[ ! -e "${dst_rp}" ]]; then
        log "target '${src}':" \
            "destination '${dst_rp}' not installed"
        return
    fi

    if [[ "${dir}" == "slink" && ( -h "${dst_rp}" && "${dst_rp}" -ef "${src_rp}" ) ]]; then
        log "${src} installed to ${dst_rp} as ${dir}"
    elif  [[ "${dir}" == "copy" && ( -f "${dst_rp}" || -d "${dst_rp}" ) ]]; then
        log "${src} installed to ${dest} as ${dir}"
    elif  [[ "${dir}" == "hlink" && ( -f "${dst_rp}" || -d "${dst_rp}" ) && \
        "${dst_rp}" -ef "${src_rp}" ]]; then
        log "${src} installed to ${dest} as ${dir}"
    else
        log "${dest} installed but not from proper target or directive"
    fi
}

# Running command on files
exec_cmd_one() {
    case "${CMD}" in
        install)
            install_one "${@}"
            ;;
        uninstall)
            uninstall_one "${@}"
            ;;
        status)
            status_one "${@}"
            ;;
    esac
}

run_cmd_one() {
    local -r target="$1"

    # Get base directory
    local -r dirname=$(dirname "${target}")
    local -r filename=$(basename "${target}")

    # Get config file
    local -r configf="${dirname}/dotlink.conf"

    # Find the right directive for this target
    local directive=
    for directive in slink copy hlink; do
        local pattern="/^${SPACE}\[${directive}\]/,/\[/s/^${SPACE}${filename}${SPACE}=${SPACE}//p"
        local dest
        dest=$(sed -n "${pattern}" "${configf}")

        if [[ -n "${dest}" ]]; then
            # Perform expected operation and return
            exec_cmd_one "${target}" "${dest}" "${directive}"
            return
        fi
    done

    # Didn't find a directive for this target

    # If it's a directory, recurse into directory
    if [ -d "${target}" ]; then
        _recurse_dir "${target}"
    else
        # Otherwise, report non-fatal error and skip
        warning "no directive found for target '${target}'"
    fi
}

_recurse_dir() {
    local -r target="$1"

    local recur
    mapfile -t recur < \
        <(find "${target}" -mindepth 1 -maxdepth 1 \
            -type f -a ! -name "dotlink.conf" -o -type d)
    run_cmd_all "${recur[@]}"
}

run_cmd_all() {
    local target=
    # Foreach target (file/directory) to examine
    for target; do

        # Test if target exists
        if [ ! -e "${target}" ]; then
            # Report non-fatal error and skip
            warning "'${target}' doesn't not exist"
            continue
        fi

        # Get config file
        local dirname=$(dirname "${target}")
        local configf="${dirname}/dotlink.conf"

        if [ ! -e "${configf}" ]; then
            # Inexisting config file
            if [ -f "${target}" ]; then
                warning "no dotlink.conf file for '${target}'"
            elif [ -d "${target}" ]; then
                _recurse_dir "${target}"
            fi
        else
            # Config file in same directory as target, try it
            run_cmd_one "${target}"
        fi
    done
}

# Command line interface
readonly USAGE="Usage: ${SCRIPTNAME} [options] <command> <targets>..."
usage() {
    local -r type="$1" ret="$2"

    log "$USAGE"
    if [[ ${type} == "short" ]]; then
        log "Try '${SCRIPTNAME} -h' for more information."
    else
        log ""
        log "Options:"
        log "   -h/-?/--help    Display this help message"
        log "   -v/--verbose    Verbose mode"
        log "   -n/--dryrun     Dryrun mode"
        log ""
        log "Command:"
        log "   install         Install <targets>"
        log "   uninstall       Uninstall <targets>"
        log "   status          Get status about <targets>"
        log ""
    fi

    exit "${ret}"
}

parse_args() {
    local arg=
    for arg; do
        case "${arg}" in
            -h|-\?|--help)
                usage "long" 0
                ;;
            -v|--verbose)
                readonly VERBOSE=1
                ;;
            -n|--dryrun)
                readonly PRETEND=1
                readonly VERBOSE=1
                ;;
            -*)
                error "Unknown option '${arg}'"
                usage "short" 1
                ;;
            *)
                # Command should be the first positional argument
                if [ -z "${CMD:-}" ]; then
                    readonly CMD="${arg}"

                    case "${CMD}" in
                        install|uninstall|status) ;;
                        *) error "Unknown command '${CMD}'"; usage "short" 1 ;;
                    esac
                else
                    # Add the rest to $@
                    set -- "${@}" "${arg}"
                fi
                ;;
        esac
        shift
    done

    # Check that we have at least one target
    if [[ $# -eq 0 ]]; then
        usage "short" 1
    fi

    # All the options should have been examined now,
    # so let's get all the targets (ie the remaining arguments)
    readonly TARGETS=("${@}")
}

# Main function
main() {
    parse_args "${@}"
    run_cmd_all "${TARGETS[@]}"
}
main "${@}"

# vim:set ft=sh:
